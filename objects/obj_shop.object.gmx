<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>obj_UI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation

/*
Spell List
0 - Empty
1 - Magic Missile
*/

// items are handled in an array containing their ID and their count
// functionally, this is a 3d array.

if !global.shopExists {
    globalvar showShop;
    showShop = false;
    globalvar maxPerPage;
    maxPerPage = 9;

    // used for the inventory array calculations
    globalvar shopWidth;
    shopWidth = 3;
    globalvar shopHeight;
    shopHeight = ceil(maxPerPage / shopWidth)


    // creates the actual inventory array, that holds the items and counts
    for (j = 0; j &lt; shopHeight; j++) {
        for (i = 0; i &lt; shopWidth; i++) {
            // a "none" item with a count of 0, i.e., empty
            global.shop[i, j] = scr_skill(0,0);
        }
    }
    
    global.shopExists = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set skill list in shop

// shop is currently initiated with 0s

global.shop[0,0] = scr_skill(1,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///save inventory info


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Inventory

// note: view is 800x600 for the port on screen
// inventory will draw at bottom right of screen, slightly off the borders
// 3x3 box of items for now. each item will be sized up to 48x48, and 2 padding between
// so total size is 150x150

if showShop &amp; global.playerID.inBuyRange {
    var x1, x2, y1, y2;
    x1 = view_xview[0] + 610;
    x2 = x1 + 150;
    y1 = view_yview[0]+ 420;
    y2 = y1 + 150;
    
    draw_set_color(c_gray);
    draw_set_alpha(.9);
    draw_rectangle(x1,y1,x2,y2,0);
    draw_set_alpha(1);
    
    // double for loop iterates over the 2d array inventory of size inv_width x inv_height
    for (j = 0; j &lt; shopHeight; j++) {
        for (i = 0; i &lt; shopWidth; i++) {
        
            var ix = x1 + i*50;
            var jy = y1 + j*50;    
        
            draw_sprite(spr_inv_border,0,x1 + 1 + i*50,y1 + 1 + j*50)

            button[i, j].x = ix;
            button[i, j].y = jy;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
