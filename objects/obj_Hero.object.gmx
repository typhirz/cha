<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Hero_Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// First inits for Initial Character Choices

// later, these will be loaded rather than set

self.armor_type = "light";
self.weapon_type = "short";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stats

// The following stats are the baseline stats for every character.
// hp: health
// mp: mana
// power: affects damage of shots and spells
// toughness: affects incoming damage
// haste: affects shots per second
// speed: affects movement speed
// intelligence: affects utility effects on spells
// regeneration: affects hp/mp regen

// names defined in an array for later use
self.stats_names[0] = "hp";
self.stats_names[1] = "mp";
self.stats_names[2] = "pwr";
self.stats_names[3] = "tgh";
self.stats_names[4] = "hst";
self.stats_names[5] = "spd";
self.stats_names[6] = "int";
self.stats_names[7] = "rgn";

self.hp_base = 150;
self.hp_per_level = 15; // per level for hp randomized +- 3
self.mp_base = 100;
self.mp_per_level = 10; //per level randomized +- 3
self.pwr_base = 20;
self.pwr_per_level = 2; // per level amounts are randomized, +- 1
self.tgh_base = 0;
self.tgh_per_level = 1;
self.hst_base = 20;
self.hst_per_level = 2;
self.spd_base = 20;
self.spd_per_level = 2;
self.int_base = 20;
self.int_per_level = 3;
self.rgn_base = 20;
self.rgn_per_level = 2;

// These switch statements provide the stat boni for different armor and weapon types.
// Medium and Middle types are neutral.

switch self.armor_type {
    case "heavy":
        self.pwr_base += 5;
        self.pwr_per_level += .5;
        self.tgh_per_level += 1;
        self.hst_base -= 5;
        self.hst_per_level -= .5;
        self.spd_base -= 10;
        self.spd_per_level -= 1;
        self.int_base -= 5;
        self.int_per_level -= .5;
        break;
    case "light":
        self.pwr_base -= 5;
        self.pwr_per_level -= .5;
        self.tgh_per_level -= 1;
        self.hst_base += 5;
        self.hst_per_level += .5;
        self.spd_base += 10;
        self.spd_per_level += 1;
        self.int_base += 5;
        self.int_per_level += .5;
        break;
}
        
switch self.weapon_type {
    case "short":
        self.hst_base += 5;
        self.hst_per_level += .5;
        self.spd_base += 5;
        self.spd_per_level += .5;
        break;
    case "long":
        self.hst_base -= 5;
        self.hst_per_level -= .5;
        self.spd_base -= 5;
        self.spd_per_level -= .5;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inits variables for Hero

image_speed = 0.1;
image_xscale = 4;
image_yscale = image_xscale;

x_stored = x;
y_stored = y;

id.isAlive = true;
id.inBuyRange = false;

// stats
// 0 = hp, 1 = mp, 2 = pwr, 3 = tgh, 4 = hst, 5 = spd, 6 = int, 7 = rgn

id.level = 1;

// later, these will be saved and pulled up later
id.stats[0] = id.hp_base + id.hp_per_level * (id.level - 1);
id.stats[1] = id.mp_base + id.mp_per_level * (id.level - 1);
id.stats[2] = id.pwr_base + id.pwr_per_level * (id.level - 1);
id.stats[3] = id.tgh_base + id.tgh_per_level * (id.level - 1);
id.stats[4] = id.hst_base + id.hst_per_level * (id.level - 1);
id.stats[5] = id.spd_base + id.spd_per_level * (id.level - 1);
id.stats[6] = id.int_base + id.int_per_level * (id.level - 1);
id.stats[7] = id.rgn_base + id.rgn_per_level * (id.level - 1);

// calculates the effect of each stat
for (var i = 0; i &lt; array_length_1d(id.stats); i++) {
    scr_stat_calc(id.stats[i], id.stats_names[i]);
}

id.can_shoot = true;

id.skillOff = 0;
id.skillOffChosen = false;

// inits 5 empty skills
for (var i = 0; i &lt; 5; i++) {
    id.skill[i] = 0
    id.skill_cd[i] = ds_grid_get(global.spell, 4, id.skill[i]); // 4 is cd
    id.skill_cd_time[i] = id.skill_cd[i];
    id.skill_can_cast[i] = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inputs

movement_inputs[0] = ord("D");
movement_inputs[1] = ord("W");
movement_inputs[2] = ord("A");
movement_inputs[3] = ord("S");

camera_inputs[0] = mb_middle;

spell_inputs[0] = ord("Q"); // first spell
spell_inputs[1] = ord("E");
spell_inputs[2] = ord("R");
spell_inputs[3] = vk_space;
spell_inputs[4] = vk_shift;

ui_inputs[0] = ord("I"); // shop
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checks for inventory


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Round x and y

x_stored = x;
y_stored = y;
x = round(x);
y = round(y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resets x and y to stored value

x = x_stored;
y = y_stored;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle cooldowns

var dt = delta_time/1000000;

self.hst_time += dt;

if self.hst_time &lt; 1 / self.hst {
    self.can_shoot = false;
}
else {
    self.can_shoot = true;
}        

for (var i = 0; i &lt; 5; i++) {
    self.skill_cd_time[i] += dt;
    if self.skill_cd_time[i] &lt; self.skill_cd[i] {
        self.skill_can_cast[i] = false;
    }
    else {
        self.skill_can_cast[i] = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Spell Input

for (var i = 0; i &lt; array_length_1d(spell_inputs); i++) {
    var key = spell_inputs[i]
    if keyboard_check(key) {
        if self.skill_can_cast[i] {
            instance_create(x,y,ds_grid_get(global.spell,2,self.skill[i])); // 2 is obj
            self.skill_cd_time[i] = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Health and Mana

if id.hp_curr &lt;= 0 {
    scr_death();
}

var dt = delta_time/1000000;

hp_perc = id.hp_curr / id.hp_max * 100;

if hp_perc &lt; 100 {
    id.hp_curr = id.hp_curr + id.hp_regen * dt
}

if hp_perc &gt; 100 {
    id.hp_curr = id.hp_max
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle UI Input

if keyboard_check_pressed(ui_inputs[0]) {
    showShop = !showShop;
    
    if !id.inBuyRange {
        showShop = false;
    }
    
    for (j = 0; j &lt; shopHeight; j++) {
        for (i = 0; i &lt; shopWidth; i++) {
        
            // when inv is opened, create the slots as objects
            if showShop {
                obj_shop.button[i, j] = instance_create(0,0,obj_shop_slot);
                obj_shop.button[i, j].slot[0] = i;
                obj_shop.button[i, j].slot[1] = j;
                // bodge, since scr_item returns an array with values i, j
            }
            
            // when closed, destroy the slots
            else {
                with obj_shop_slot { instance_destroy() }
            }
        }
    }        
}  

if !id.inBuyRange {
    with obj_shop_slot { instance_destroy() }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Movement Input

var dt = delta_time/1000000;
var pixels_this_frame = dt * self.spd;

var move_xinput = 0;
var move_yinput = 0;

for (var i = 0; i &lt; array_length_1d(movement_inputs); i++) {
    var key = movement_inputs[i]
    if keyboard_check(key) {
        var angle = i*90;
        move_xinput += lengthdir_x(1, angle);
        move_yinput += lengthdir_y(1, angle);
    }
}
 
var moving = ( point_distance(0,0,move_xinput,move_yinput) &gt; 0 );
if moving  {
    var move_dir = point_direction(0,0,move_xinput,move_yinput);
    move(pixels_this_frame,move_dir)
}

if keyboard_check(movement_inputs[0]) or keyboard_check(movement_inputs[3]) { sprite_index = spr_Hero_Right_Moving }
if keyboard_check(movement_inputs[2]) { sprite_index = spr_Hero_Left_Moving }
if keyboard_check(movement_inputs[1]) { sprite_index = spr_Hero_Up_Moving }

if !moving {
    if sprite_index = spr_Hero_Right_Moving {
        sprite_index = spr_Hero_Right;
    }
    if sprite_index = spr_Hero_Left_Moving {
        sprite_index = spr_Hero_Left;
    }
    if sprite_index = spr_Hero_Up_Moving {
        sprite_index = spr_Hero_Up;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Camera Input

if mouse_check_button_pressed(camera_inputs[0]) {
     global.cameraInst.cameraFollowMouse = -1 * (global.cameraInst.cameraFollowMouse - 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create instance of obj_proj_ShortBlue

if !position_meeting(mouse_x,mouse_y,obj_UI) {
    if self.can_shoot {
        instance_create(x,y,obj_proj_ShortBlue);
        self.hst_time = 0;
        self.hp_curr -= 10;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health and Mana Bars

hp_width = 20
hp_height = 6

hp_x = x - hp_width/2 - 2
hp_y = y -20

if self.isAlive {
    draw_healthbar(hp_x, hp_y-hp_height, hp_x+hp_width, hp_y, hp_perc, c_black, c_red, c_lime, 0, true, true);
    draw_text(hp_x, hp_y-hp_height, hp_curr);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Self

if self.isAlive {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
